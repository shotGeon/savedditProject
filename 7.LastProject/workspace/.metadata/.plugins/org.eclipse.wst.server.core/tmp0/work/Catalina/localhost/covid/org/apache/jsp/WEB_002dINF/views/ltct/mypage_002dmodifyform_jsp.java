/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2022-01-12 00:04:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.ltct;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class mypage_002dmodifyform_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<title></title>\r\n");
      out.write("\r\n");
      out.write("<head></head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"wrapper\">\r\n");
      out.write("\t\t\t<div class=\"card-primary\">\r\n");
      out.write("\t\t\t  \r\n");
      out.write("\t\t\t  <!-- /.card-header -->\r\n");
      out.write("\t\t\t  <!-- form start -->\r\n");
      out.write("\t\t\t  <form>\r\n");
      out.write("\t\t\t  \r\n");
      out.write("\t\t\t  <div class=\"card-body\">\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t    <div class=\"row\" style=\"margin-bottom: 20px;\">\r\n");
      out.write("\t\t\t        <label for=\"mber_id\" class=\"col-md-2 text-right\" style=\"padding-top: 7px;\">소속기관</label>\r\n");
      out.write("\t\t\t\t      <div class=\"col-md-3\">\r\n");
      out.write("\t\t\t\t        <input type=\"text\" class=\"form-control\" id=\"mber_id\" value=\"대덕검사소\" readonly>\r\n");
      out.write("\t\t\t\t      </div>\r\n");
      out.write("\t\t\t      \r\n");
      out.write("\t\t\t        <label for=\"mber_id\" class=\"col-md-2 text-right\" style=\"padding-top: 7px;\">소속번호</label>\r\n");
      out.write("\t\t\t\t      <div class=\"col-md-4\">\r\n");
      out.write("\t\t\t\t        <input type=\"text\" class=\"form-control\" id=\"mber_id\" value=\"A12345\" readonly>\r\n");
      out.write("\t\t\t\t      </div>\r\n");
      out.write("\t\t\t    </div>\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t    <div class=\"row\" style=\"margin-bottom: 20px;\">\r\n");
      out.write("\t\t\t        <label for=\"mber_nm\" class=\"col-md-2 text-right\" style=\"padding-top: 7px;\">성명</label>\r\n");
      out.write("\t\t\t\t      <div class=\"col-md-3\">\r\n");
      out.write("\t\t\t\t        <input type=\"text\" class=\"form-control\" id=\"mber_id\" value=\"홍길동\" readonly>\r\n");
      out.write("\t\t\t\t      </div>\r\n");
      out.write("\t\t\t      \r\n");
      out.write("\t\t\t        <label for=\"mber_birth\" class=\"col-md-2 text-right\" style=\"padding-top: 7px;\">생년월일</label>\r\n");
      out.write("\t\t\t\t      <div class=\"col-md-4\">\r\n");
      out.write("\t\t\t\t        <input type=\"date\" class=\"form-control\" id=\"mber_birth\" value=\"2022-01-06\" readonly>\r\n");
      out.write("\t\t\t\t      </div>\r\n");
      out.write("\t\t\t    </div>\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t    <div class=\"row\" style=\"margin-bottom: 20px;\">\r\n");
      out.write("\t\t\t        <label for=\"mber_telno\" class=\"col-md-2 text-right\" style=\"padding-top: 7px;\">연락처</label>\r\n");
      out.write("\t\t\t\t      <div class=\"col-md-3\">\r\n");
      out.write("\t\t\t\t        <input type=\"text\" class=\"form-control\" id=\"mber_id\" value=\"010-1234-5678\" maxlength=\"13\">\r\n");
      out.write("\t\t\t\t      </div>\r\n");
      out.write("\t\t\t      \r\n");
      out.write("\t\t\t        <label for=\"mber_email\" class=\"col-md-2 text-right\" style=\"padding-top: 7px;\">이메일</label>\r\n");
      out.write("\t\t\t\t      <div class=\"col-md-4\">\r\n");
      out.write("\t\t\t\t        <input type=\"text\" class=\"form-control\" id=\"mber_birth\" value=\"ddit@ddit.or.kr\">\r\n");
      out.write("\t\t\t\t      </div>\r\n");
      out.write("\t\t\t    </div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"row\" style=\"margin-bottom: 20px;\">\r\n");
      out.write("\t\t\t        <label for=\"mber_adres\" class=\"col-md-2 text-right\">주소</label>\r\n");
      out.write("\t\t\t          <div class=\"col-md-7\">\r\n");
      out.write("\t\t\t            <input type=\"text\" class=\"form-control\" id=\"mber_adres\" id=\"mber_adres\" value=\"대전 중구 계룡로 846\">\r\n");
      out.write("\t\t\t          </div>\r\n");
      out.write("\t\t\t          <div class=\"col-md-2\">\r\n");
      out.write("\t\t\t          <button type=\"button\" onclick=\"address_go();\" class=\"btn btn-block btn-success\" style=\"background-color: #5bbc71;\">주소검색</button>\r\n");
      out.write("\t\t\t          </div>\r\n");
      out.write("\t\t\t   </div>\r\n");
      out.write("\t\t\t   \r\n");
      out.write("\t\t\t    <div class=\"row\">\r\n");
      out.write("\t\t\t\t    <div class=\"col-md-7\"></div>\r\n");
      out.write("\t\t\t\t    \r\n");
      out.write("\t\t\t\t    <div class=\"col-md-2\">\r\n");
      out.write("\t\t\t\t   \t\t<button onclick=\"history.go(-1);\" type=\"button\" class=\"btn btn-block btn-success\" style=\"background-color: #5bbc71;\">취소</button>\r\n");
      out.write("\t\t\t\t    </div>\r\n");
      out.write("\t\t\t\t    <div class=\"col-md-2\">\r\n");
      out.write("\t\t\t\t   \t\t<button type=\"button\" class=\"btn btn-block btn-success\" style=\"background-color: #5bbc71;\">수정</button>\r\n");
      out.write("\t\t\t\t    </div>\r\n");
      out.write("\t\t\t    </div>\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t </div>\r\n");
      out.write("\t\t\t    <!-- /.card-body -->\r\n");
      out.write("\t\t\t    \r\n");
      out.write("\t\t\t\t\t<input type=\"hidden\" value=\"아이디\">\r\n");
      out.write("\t\t\t  </form>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("function address_go() {\r\n");
      out.write("    new daum.Postcode({\r\n");
      out.write("        oncomplete: function(data) {\r\n");
      out.write("            // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n");
      out.write("\r\n");
      out.write("            // 각 주소의 노출 규칙에 따라 주소를 조합한다.\r\n");
      out.write("            // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n");
      out.write("            var addr = ''; // 주소 변수\r\n");
      out.write("            var extraAddr = ''; // 참고항목 변수\r\n");
      out.write("\r\n");
      out.write("            //사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.\r\n");
      out.write("            if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우\r\n");
      out.write("                addr = data.roadAddress;\r\n");
      out.write("            } else { // 사용자가 지번 주소를 선택했을 경우(J)\r\n");
      out.write("                addr = data.jibunAddress;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            // 사용자가 선택한 주소가 도로명 타입일때 참고항목을 조합한다.\r\n");
      out.write("            if(data.userSelectedType === 'R'){\r\n");
      out.write("                // 법정동명이 있을 경우 추가한다. (법정리는 제외)\r\n");
      out.write("                // 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\r\n");
      out.write("                if(data.bname !== '' && /[동|로|가]$/g.test(data.bname)){\r\n");
      out.write("                    extraAddr += data.bname;\r\n");
      out.write("                }\r\n");
      out.write("                // 건물명이 있고, 공동주택일 경우 추가한다.\r\n");
      out.write("                if(data.buildingName !== '' && data.apartment === 'Y'){\r\n");
      out.write("                    extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);\r\n");
      out.write("                }\r\n");
      out.write("                // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\r\n");
      out.write("                if(extraAddr !== ''){\r\n");
      out.write("                    extraAddr = ' (' + extraAddr + ')';\r\n");
      out.write("                }\r\n");
      out.write("                // 조합된 참고항목을 해당 필드에 넣는다.\r\n");
      out.write("                document.getElementById(\"mber_adres\").value = extraAddr;\r\n");
      out.write("            \r\n");
      out.write("            } else {\r\n");
      out.write("                document.getElementById(\"mber_adres\").value = '';\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("            document.getElementById(\"mber_adres\").value = addr+\",\";\r\n");
      out.write("            // 커서를 상세주소 필드로 이동한다.\r\n");
      out.write("            document.getElementById(\"mber_adres\").focus();\r\n");
      out.write("        }\r\n");
      out.write("    }).open();\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</body>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
