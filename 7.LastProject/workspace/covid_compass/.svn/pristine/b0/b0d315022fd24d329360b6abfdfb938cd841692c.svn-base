package com.spring.compass.controller;

import java.util.Map;

import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.spring.compass.command.DgnssDetailCommand;
import com.spring.compass.command.DgnssListSearchCommand;
import com.spring.compass.command.InptntDetailCommand;
import com.spring.compass.command.InptntListSearchCommand;
import com.spring.compass.command.ReqInptntDetailCommand;
import com.spring.compass.command.SckbdreqDetailCommand;
import com.spring.compass.command.VPstiCommand;
import com.spring.compass.service.HsptSerivceLKH;
import com.spring.compass.service.LtctServiceLKH;
import com.spring.compass.service.PstiServiceLKH;
import com.spring.compass.vo.DgnssResultVO;
import com.spring.compass.vo.HsptVO;
import com.spring.compass.vo.InptntVO;
import com.spring.compass.vo.LtctVO;
import com.spring.compass.vo.SckbdreqVO;
import com.spring.compass.vo.SmplResultVO;

@RestController
@RequestMapping("/rest-hspt")
public class RestHsptController {

	private static final Logger LOGGER = LoggerFactory.getLogger(RestHsptController.class);

	@Autowired
	@Qualifier("hsptServiceLKH")
	private HsptSerivceLKH hsptServiceLKH;

	@Autowired
	private PstiServiceLKH pstiServiceLKH;
	
	@Autowired
	private HsptSerivceLKH hsptSerivceLKH;
	
	@Autowired
	private LtctServiceLKH ltctServiceLKH;

	@RequestMapping("/inptnt-list")
	public ResponseEntity<Map<String, Object>> inptntList(
			@RequestParam(defaultValue = "1") int page,
			@RequestParam(defaultValue = "15") int perPageNum, 
			@RequestParam(defaultValue = "") String searchType,
			@RequestParam(defaultValue = "") String keyword, 
			HttpSession session
	) throws Exception {
		ResponseEntity<Map<String, Object>> entity = null;
		System.out.println(String.format("page is %d, searchType is %s, keyword is %s, perpageNum is %d", page,
				searchType, keyword, perPageNum));

		InptntListSearchCommand cri = new InptntListSearchCommand(page, perPageNum, searchType, keyword);

		HsptVO hspt = (HsptVO) (session.getAttribute("loginInst"));

		System.out.println(hspt);

		cri.setHsptNo(hspt.getHsptNo());

		System.out.println(cri.toString());

		try {
			Map<String, Object> dataMap = hsptServiceLKH.getInptntList(cri);

			entity = new ResponseEntity<Map<String, Object>>(dataMap, HttpStatus.OK);

		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String, Object>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

		return entity;
	}

	@RequestMapping("/dgnss-list")
	public ResponseEntity<Map<String, Object>> dgnssList(
			@RequestParam(defaultValue = "1") int page,
			@RequestParam(defaultValue = "15") int perPageNum,
			@RequestParam(defaultValue = "") String searchType,
			@RequestParam(defaultValue = "") String keyword,
			HttpSession session)
					throws Exception {
		ResponseEntity<Map<String, Object>> entity = null;
		System.out.println(String.format("page is %d, searchType is %s, keyword is %s, perpageNum is %d", page,
				searchType, keyword, perPageNum));
		DgnssListSearchCommand cri = new DgnssListSearchCommand(page, perPageNum, searchType, keyword);

		HsptVO hspt = (HsptVO) (session.getAttribute("loginInst"));

		System.out.println(hspt);

		cri.setHsptNo(hspt.getHsptNo());

		System.out.println(cri.toString());

		try {
			Map<String, Object> dataMap = hsptServiceLKH.getDgnssList(cri);

			entity = new ResponseEntity<Map<String, Object>>(dataMap, HttpStatus.OK);

		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String, Object>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

		return entity;
	}



	@RequestMapping("/req-inptnt-list")
	public ResponseEntity<Map<String, Object>> reqInptntList(
												@RequestParam(defaultValue = "1") int page,
												@RequestParam(defaultValue = "15") int perPageNum,
												@RequestParam(defaultValue = "") String searchType,
												@RequestParam(defaultValue = "") String keyword, 
												HttpSession session)
														throws Exception {
		ResponseEntity<Map<String, Object>> entity = null;
		System.out.println(String.format("page is %d, searchType is %s, keyword is %s, perpageNum is %d", page,
				searchType, keyword, perPageNum));
		InptntListSearchCommand cri = new InptntListSearchCommand(page, perPageNum, searchType, keyword);

		HsptVO hspt = (HsptVO) (session.getAttribute("loginInst"));

		System.out.println(hspt);

		cri.setHsptNo(hspt.getHsptNo());

		System.out.println(cri.toString());
		
		try {
			Map<String, Object> dataMap = hsptServiceLKH.getReqInptntList(cri);

			entity = new ResponseEntity<Map<String, Object>>(dataMap, HttpStatus.OK);

		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String, Object>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

		return entity;
	}
	
	@RequestMapping("/sckbdreq-list")
	public ResponseEntity<Map<String, Object>> sckbdreqList(
												@RequestParam(defaultValue = "1") int page,
												@RequestParam(defaultValue = "15") int perPageNum,
												@RequestParam(defaultValue = "") String searchType,
												@RequestParam(defaultValue = "") String keyword,
												@RequestParam(defaultValue="C103")String typeCode,
												HttpSession session)
														throws Exception {
		ResponseEntity<Map<String, Object>> entity = null;
		System.out.println(String.format("page is %d, searchType is %s, keyword is %s, perpageNum is %d, typeCode is %s", page,
				searchType, keyword, perPageNum, typeCode));
		InptntListSearchCommand cri = new InptntListSearchCommand(page, perPageNum, searchType, keyword);

		HsptVO hspt = (HsptVO) (session.getAttribute("loginInst"));

		System.out.println(hspt);

		cri.setHsptNo(hspt.getHsptNo());
		cri.setTypeCode(typeCode);

		System.out.println(cri.toString());
		
		Map<String, Object> dataMap = null;
		
		try {
			
			if(cri.getTypeCode().equals("C103")){
				dataMap = hsptServiceLKH.getSckbdreqHsptList(cri);
			}
			if(cri.getTypeCode().equals("C104")) {
				dataMap = hsptServiceLKH.getSckbdreqLtctList(cri);
			}

			entity = new ResponseEntity<Map<String, Object>>(dataMap, HttpStatus.OK);

		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String, Object>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

		return entity;
	}
	
	@RequestMapping("/sckbdreq-hspt-list")
	public ResponseEntity<Map<String, Object>> sckbdreqHsptList(
												@RequestParam(defaultValue = "1") int page,
												@RequestParam(defaultValue = "15") int perPageNum,
												@RequestParam(defaultValue = "") String searchType,
												@RequestParam(defaultValue = "") String keyword,
												HttpSession session)
														throws Exception {
		ResponseEntity<Map<String, Object>> entity = null;
		System.out.println(String.format("page is %d, searchType is %s, keyword is %s, perpageNum is %d", page,
				searchType, keyword, perPageNum));
		InptntListSearchCommand cri = new InptntListSearchCommand(page, perPageNum, searchType, keyword);

		HsptVO hspt = (HsptVO) (session.getAttribute("loginInst"));

		System.out.println(hspt);

		cri.setHsptNo(hspt.getHsptNo());

		System.out.println(cri.toString());
		try {
			Map<String, Object> dataMap = hsptServiceLKH.getSckbdreqHsptList(cri);

			entity = new ResponseEntity<Map<String, Object>>(dataMap, HttpStatus.OK);

		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String, Object>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

		return entity;
	}
	
	@RequestMapping("/sckbdreq-ltct-list")
	public ResponseEntity<Map<String, Object>> sckbdreqLtctList(
												@RequestParam(defaultValue = "1") int page,
												@RequestParam(defaultValue = "15") int perPageNum,
												@RequestParam(defaultValue = "") String searchType,
												@RequestParam(defaultValue = "") String keyword,
												HttpSession session)
														throws Exception {
		ResponseEntity<Map<String, Object>> entity = null;
		System.out.println(String.format("page is %d, searchType is %s, keyword is %s, perpageNum is %d", page,
				searchType, keyword, perPageNum));
		InptntListSearchCommand cri = new InptntListSearchCommand(page, perPageNum, searchType, keyword);

		HsptVO hspt = (HsptVO) (session.getAttribute("loginInst"));

		System.out.println(hspt);

		cri.setHsptNo(hspt.getHsptNo());

		System.out.println(cri.toString());
		try {
			Map<String, Object> dataMap = hsptServiceLKH.getSckbdreqLtctList(cri);

			entity = new ResponseEntity<Map<String, Object>>(dataMap, HttpStatus.OK);

		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String, Object>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

		return entity;
	}
	
	@RequestMapping("/dgnss-detail")
	public ResponseEntity<DgnssDetailCommand> dgnssDetail(String manageNo) throws Exception {
		ResponseEntity<DgnssDetailCommand> entity = null;

		VPstiCommand psti = pstiServiceLKH.getVPstiByManageNo(manageNo);

		SmplResultVO smplResult = pstiServiceLKH.getVSmplResultByManageNo(manageNo);

		DgnssResultVO dgnssResult = pstiServiceLKH.getVDgnssResultByManageNo(manageNo);

		System.out.println(psti);
		System.out.println(smplResult);
		System.out.println(dgnssResult);

		DgnssDetailCommand dgnssDetailCommand = new DgnssDetailCommand();

		dgnssDetailCommand.setData(dgnssResult);
		dgnssDetailCommand.setData(smplResult);
		dgnssDetailCommand.setData(psti);
		
		System.out.println(dgnssDetailCommand);

		entity = new ResponseEntity<DgnssDetailCommand>(dgnssDetailCommand, HttpStatus.OK);

		return entity;
	}
	@RequestMapping("/inptnt-detail")
	public ResponseEntity<InptntDetailCommand> inptntDetail(String manageNo) throws Exception{
		ResponseEntity<InptntDetailCommand> entity = null;
		
		VPstiCommand psti = pstiServiceLKH.getVPstiByManageNo(manageNo);
		DgnssResultVO dgnssResult = pstiServiceLKH.getVDgnssResultByManageNo(manageNo);
		InptntVO inptnt = pstiServiceLKH.getInptntByManageNo(manageNo);
		
		System.out.println(psti);
		System.out.println(dgnssResult);
		System.out.println(inptnt);
		
		InptntDetailCommand inptntDetailCommand = new InptntDetailCommand();
		
		inptntDetailCommand.setData(inptnt);
		inptntDetailCommand.setData(dgnssResult);
		inptntDetailCommand.setData(psti);
		
		System.out.println(inptntDetailCommand);
		
		entity = new ResponseEntity<InptntDetailCommand>(inptntDetailCommand, HttpStatus.OK);
		
		return entity;
	}
	
	@RequestMapping("/req-inptnt-detail")
	public ResponseEntity<ReqInptntDetailCommand> reqInptntDetail(String manageNo) throws Exception{
		ResponseEntity<ReqInptntDetailCommand> entity = null;
		
		VPstiCommand psti = pstiServiceLKH.getVPstiByManageNo(manageNo);
		DgnssResultVO dgnssResult = pstiServiceLKH.getVDgnssResultByManageNo(manageNo);
		
		SckbdreqVO sckbdreq = pstiServiceLKH.getSckbdreqByManageNo(manageNo);
		
		String hsptNo = sckbdreq.getHsptNo();
		HsptVO hspt = hsptSerivceLKH.getHsptByHsptNo(hsptNo);
		
		System.out.println(psti);
		System.out.println(dgnssResult);
		System.out.println(sckbdreq);
		System.out.println(hspt);
		
		ReqInptntDetailCommand reqInptntDetailCommand = new ReqInptntDetailCommand();
		
		reqInptntDetailCommand.setData(dgnssResult);
		reqInptntDetailCommand.setData(psti);
		reqInptntDetailCommand.setData(sckbdreq);
		reqInptntDetailCommand.setData(hspt);
		
		
		System.out.println(reqInptntDetailCommand);
		
		entity = new ResponseEntity<ReqInptntDetailCommand>(reqInptntDetailCommand, HttpStatus.OK);
		
		return entity;
	}
	
	@RequestMapping("/sckbdreq-detail")
	public ResponseEntity<SckbdreqDetailCommand> sckbdreqLtctDetail(String manageNo) throws Exception{
		ResponseEntity<SckbdreqDetailCommand> entity = null;
		
		VPstiCommand psti = pstiServiceLKH.getVPstiByManageNo(manageNo);
		DgnssResultVO dgnssResult = pstiServiceLKH.getVDgnssResultByManageNo(manageNo);
		
		SckbdreqVO sckbdreq = pstiServiceLKH.getSckbdreqByManageNo(manageNo);
		
		String childNo = sckbdreq.getChildNo();
		LtctVO ltct = null;
		HsptVO hspt = null;
		
		System.out.println(sckbdreq.getType());
		
		if(sckbdreq.getType().equals("A")) {
			hspt = hsptSerivceLKH.getHsptByHsptNo(childNo);
		}
		if(sckbdreq.getType().equals("B")) {
			ltct = ltctServiceLKH.getLtctByLtctNo(childNo);
		}
		
		System.out.println(psti);
		System.out.println(dgnssResult);
		System.out.println(sckbdreq);
		System.out.println(ltct);
		
		SckbdreqDetailCommand sckbdreqDetailCommand = new SckbdreqDetailCommand();
		
		sckbdreqDetailCommand.setData(dgnssResult);
		sckbdreqDetailCommand.setData(psti);
		sckbdreqDetailCommand.setData(sckbdreq);
		sckbdreqDetailCommand.setData(ltct);
		sckbdreqDetailCommand.setData(hspt);
		
		System.out.println(sckbdreqDetailCommand);
		
		entity = new ResponseEntity<SckbdreqDetailCommand>(sckbdreqDetailCommand, HttpStatus.OK);
		
		return entity;
	}	
	
}
