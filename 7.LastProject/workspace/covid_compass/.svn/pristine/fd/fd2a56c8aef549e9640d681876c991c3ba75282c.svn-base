package com.spring.compass.service;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.spring.compass.command.IsoptntListVO;
import com.spring.compass.command.LtctIsoptntHighTempCardListVO;
import com.spring.compass.command.LtctResListVO;
import com.spring.compass.command.LtctSckbdCountAndStats;
import com.spring.compass.command.LtctSckbdListVO;
import com.spring.compass.command.LtctSearchCommand;
import com.spring.compass.command.PageMaker;
import com.spring.compass.dao.LtctDAO;
import com.spring.compass.vo.LtctBasicDetailVO;
import com.spring.compass.vo.LtctVO;

public class LtctServiceImpl implements LtctService{
	
	private LtctDAO ltctDAO;
	public void setLtctDAO(LtctDAO ltctDAO) {
		this.ltctDAO = ltctDAO;
	}
	@Override
	public LtctVO getLtctByInstNo(String instNo) throws Exception {
		LtctVO ltct = ltctDAO.selectLtctByInstNo(instNo);
		return ltct;
	}
	@Override
	public String getLtctCityNo(String city) throws Exception {
		String cityNo = ltctDAO.selectLtctCityNo(city);
		return cityNo;
	}
	@Override
	public int getLtctSeqNo() throws Exception {
		int hstpSeq = ltctDAO.selectLtctNextVal();
		return hstpSeq;
	}
	@Override
	public int getInstSeqNo() throws Exception {
		int instSeq = ltctDAO.selectInstNextval();
		return instSeq;
	}
	@Override
	public void registLtct(LtctVO ltct) throws Exception {
		ltctDAO.insertLtct(ltct);
		
		
	}
	@Override
	public void registInst(LtctVO ltct) throws SQLException {
		 ltctDAO.insertInst(ltct);
		
	}
	@Override
	public Map<String, Object> getIsoptntListPage(LtctSearchCommand cri) throws Exception {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		PageMaker pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		int totalCount = ltctDAO.selectIsoptntListCount(cri);
		
		pageMaker.setTotalCount(totalCount);
		List<IsoptntListVO> isoptntList = ltctDAO.selectIsoptntList(cri);
		
		dataMap.put("isoptntList", isoptntList);
		dataMap.put("pageMaker", pageMaker);
		
		return dataMap;
	}
	@Override
	public LtctBasicDetailVO getBasicDetail(String manageNo) throws Exception {
		LtctBasicDetailVO isoptnt = ltctDAO.selectBasicDetail(manageNo);
		String dgnssNote = ltctDAO.selectIsoptntDgnssNote(manageNo);
		
		LtctBasicDetailVO lastReq = ltctDAO.selectLastReq(manageNo);
		isoptnt.setReqYmd(lastReq.getReqYmd());
		isoptnt.setSmplResCode(lastReq.getSmplResCode());
		isoptnt.setDgnssNote(dgnssNote);
		
		return isoptnt;
	}
	
	
	
	
	
	@Override
	public Map<String, Object> getResListPage(LtctSearchCommand cri) throws Exception {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		PageMaker pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		
		int totalCount = ltctDAO.selectResListCount(cri);
		
		pageMaker.setTotalCount(totalCount);
		List<LtctResListVO> resList = ltctDAO.selectResList(cri);
		
		dataMap.put("resList", resList);
		dataMap.put("pageMaker", pageMaker);
		
		return dataMap;
	}
	@Override
	public Map<String, Object> getSckbdListPage(LtctSearchCommand cri) throws Exception {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		PageMaker pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		
		int totalCount = ltctDAO.selectSckbdListCount(cri);
		
		pageMaker.setTotalCount(totalCount);
		List<LtctSckbdListVO> sckbdList = ltctDAO.selectSckbdList(cri);
		
		dataMap.put("sckbdList", sckbdList);
		dataMap.put("pageMaker", pageMaker);
		return dataMap;
	}
	@Override
	public LtctBasicDetailVO getSckbdreqYmd(String manageNo) throws Exception {
		LtctBasicDetailVO sckbdreqYmd = ltctDAO.selectSckbdreqYmd(manageNo);
		return sckbdreqYmd;
	}
	@Override
	public LtctSckbdCountAndStats getSckbdCountAndStats(String ltctNo) throws Exception {
		// 나눈이유는 통계가 없을경우에 병상까지 안나오기때문에 나눠서 뽑고 합침.
		LtctSckbdCountAndStats sckbdCount = ltctDAO.selectSckbdCount(ltctNo);
		LtctSckbdCountAndStats sckbdCountAndStats = ltctDAO.selectSckbdStats(ltctNo);
		if(sckbdCountAndStats == null) {
			return sckbdCount;
		}
		sckbdCountAndStats.setRmndSckbdCnt(sckbdCount.getRmndSckbdCnt());
		sckbdCountAndStats.setSckbdCnt(sckbdCount.getSckbdCnt());
		return sckbdCountAndStats;
	}
	@Override
	public List<LtctIsoptntHighTempCardListVO> getIsoptntHighTempCardList(String ltctNo) throws Exception {
		List<LtctIsoptntHighTempCardListVO> highTempCardList = ltctDAO.selectIsoptntHighTempCardList(ltctNo);
		return highTempCardList;
	}

}
