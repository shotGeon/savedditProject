package com.spring.compass.service;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.spring.compass.command.DgnssListSearchCommand;
import com.spring.compass.command.DgnssListVO;
import com.spring.compass.command.DgnssSckbdreqCommand;
import com.spring.compass.command.InptntListSearchCommand;
import com.spring.compass.command.InptntListVO;
import com.spring.compass.command.PageMaker;
import com.spring.compass.command.ReqInptntListCommand;
import com.spring.compass.command.SckbdreqLtctListCommand;
import com.spring.compass.dao.HsptDAO;
import com.spring.compass.dao.LtctDAO;
import com.spring.compass.dao.PbhtDAO;
import com.spring.compass.dao.PstiDAO;
import com.spring.compass.vo.DgnssResultVO;
import com.spring.compass.vo.HsptVO;
import com.spring.compass.vo.InptntVO;
import com.spring.compass.vo.LtctVO;
import com.spring.compass.vo.ManageVO;
import com.spring.compass.vo.PbhtVO;

public class HsptServiceImplLKH extends HsptServiceImpl implements HsptSerivceLKH{
	
	
	private PbhtDAO pbhtDAO;
	private LtctDAO ltctDAO;
	private HsptDAO hsptDAO;
	
	private PstiDAO pstiDAO;
	
	public void PstiDAO(PstiDAO pstiDAO) {
		this.pstiDAO = pstiDAO;
	}
	
	public void setHsptDAO(HsptDAO hsptDAO) {
		this.hsptDAO = hsptDAO;
	}
	public void setPbhtDAO(PbhtDAO pbhtDAO) {
		this.pbhtDAO = pbhtDAO;
	}
	public void setLtctDAO(LtctDAO ltctDAO) {
		this.ltctDAO = ltctDAO;
	}
	@Override
	public Map<String, Object> getDgnssList(DgnssListSearchCommand cri) throws SQLException {
		Map<String, Object> dataMap = null;
		
		PageMaker pageMaker = null;
		
		pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		
		int totalCount = hsptDAO.selectDgnssListCount(cri);
		
		System.out.println(totalCount);
		
		pageMaker.setTotalCount(totalCount);
		
		List<DgnssListVO> dgnssList = hsptDAO.selectDgnssList(cri);
		
		dataMap = new HashMap<String, Object>();
		
		System.out.println(pageMaker);
		
		for(int i = 0; i < dgnssList.size(); i++) {
			
			DgnssListVO dgnss = dgnssList.get(i);
			if(dgnss.getType().equals("A")) {
				String pbhtNo = dgnss.getChildNo();
				PbhtVO pbht = pbhtDAO.selectPbhtByPbhtNo(pbhtNo);
				dgnss.setPbhtNm(pbht.getInstNm());
				
				dgnss.setPbht(true);
				
			}else if(dgnss.getType().equals("B")) {
				String ltctNo = dgnss.getChildNo();
				LtctVO ltct = ltctDAO.selectLtctByLtctNo(ltctNo);
				dgnss.setLtctNm(ltct.getInstNm());
				dgnss.setPbht(false);
			}
			
			dgnssList.set(i, dgnss);
		}
		for(DgnssListVO dgnss : dgnssList) {
			System.out.println(String.format("isPbht : %s, pbhtNm : %s, ltctNm : %s", dgnss.isPbht(),dgnss.getPbhtNm(),dgnss.getLtctNm()));
		}
		dataMap.put("dgnssList", dgnssList);
		dataMap.put("pageMaker", pageMaker);
		return dataMap;
	}
	@Override
	public Map<String, Object> getReqInptntList(InptntListSearchCommand cri) throws Exception {
		Map<String, Object> dataMap = null;
		
		PageMaker pageMaker = null;
		
		pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		
		int totalCount = hsptDAO.selectReqInptntListCount(cri);
		
		System.out.println(totalCount);
		
		pageMaker.setTotalCount(totalCount);
		
		List<ReqInptntListCommand> reqInptntList = hsptDAO.selectReqInptntList(cri);
		dataMap = new HashMap<String, Object>();
		
		for(ReqInptntListCommand reqInptnt : reqInptntList) {
			System.out.println(reqInptnt);
		}
		
		dataMap.put("reqInptntList", reqInptntList);
		dataMap.put("pageMaker", pageMaker);
		return dataMap;
	}
	@Override
	public Map<String, Object> getInptntList(InptntListSearchCommand cri) throws Exception {

		Map<String, Object> dataMap = null;

		PageMaker pageMaker = null;

		pageMaker = new PageMaker();
		pageMaker.setCri(cri);


		System.out.println(hsptDAO == null);


		int totalCount = hsptDAO.selectInptntListCount(cri);

		System.out.println(totalCount);

		pageMaker.setTotalCount(totalCount);

		List<InptntListVO> inptntList = hsptDAO.selectInptntList(cri);

		dataMap = new HashMap<String, Object>();

		dataMap.put("inptntList", inptntList);
		dataMap.put("pageMaker", pageMaker);

		System.out.println(pageMaker);

		for(InptntListVO inptnt : inptntList) {
			System.out.println(inptnt);
		}

		return dataMap;
	}
	@Override
	public Map<String, Object> getSckbdreqHsptList(InptntListSearchCommand cri) throws Exception {

		Map<String, Object> dataMap = null;

		PageMaker pageMaker = null;

		pageMaker = new PageMaker();
		pageMaker.setCri(cri);

		int totalCount = hsptDAO.selectSckbdReqHsptListCount(cri);

		System.out.println(totalCount);

		pageMaker.setTotalCount(totalCount);

		List<ReqInptntListCommand> sckbdreqList = hsptDAO.selectSckbdReqHsptList(cri);

		dataMap = new HashMap<String, Object>();

		dataMap.put("sckbdreqList", sckbdreqList);
		dataMap.put("pageMaker", pageMaker);

		System.out.println(pageMaker);

		for(ReqInptntListCommand sckbdreq : sckbdreqList) {
			System.out.println(sckbdreq);
		}

		return dataMap;
	}
	@Override
	public Map<String, Object> getSckbdreqLtctList(InptntListSearchCommand cri) throws Exception {
		Map<String, Object> dataMap = null;

		PageMaker pageMaker = null;

		pageMaker = new PageMaker();
		pageMaker.setCri(cri);

		int totalCount = hsptDAO.selectSckbdReqLtctListCount(cri);

		System.out.println(totalCount);

		pageMaker.setTotalCount(totalCount);

		List<SckbdreqLtctListCommand> sckbdreqList = hsptDAO.selectSckbdReqLtctList(cri);

		dataMap = new HashMap<String, Object>();

		dataMap.put("sckbdreqList", sckbdreqList);
		dataMap.put("pageMaker", pageMaker);

		System.out.println(pageMaker);

		for(SckbdreqLtctListCommand sckbdreq : sckbdreqList) {
			System.out.println(sckbdreq);
		}

		return dataMap;
	}
	
	@Override
	public HsptVO getHsptByHsptNo(String hsptNo) throws Exception {
		HsptVO hspt = hsptDAO.selectHsptByHsptNo(hsptNo);
		return hspt;
	}

	// return String은 서비스 진행의 피드백을 위함
	@Override
	public String registInptntDirectlyByDgnss(DgnssSckbdreqCommand dgnssSckbdreqCommand) throws Exception {
		
		String msg = "success";
		
		// 1.입력을 위한 준비작업
		// 컨트롤러에서 받는 데이터 #dgnssNo, dgnssNote, dgnssResultCode
		String manageNo = dgnssSckbdreqCommand.getManageNo();
		String dgnssNo = dgnssSckbdreqCommand.getDgnssNo();
		String dgnssNote = dgnssSckbdreqCommand.getDgnssNote();
		String dgnssResultCode = dgnssSckbdreqCommand.getDgnssResultCode();
		
		DgnssResultVO dgnssResult = new DgnssResultVO();
		dgnssResult.setDgnssNo(dgnssNo);
		dgnssResult.setDgnssNote(dgnssNote);
		dgnssResult.setDgnssResultCode(dgnssResultCode);
		
		DgnssResultVO dgnss = pstiDAO.selectVDgnssResultByDgnssNo(dgnssNo);
		HsptVO hspt = hsptDAO.selectHsptByHsptNo(dgnss.getHsptNo());

		// 2. 입원환자 등록 #inptntNo, hsptNo, manageNo
		String inptntNo = pstiDAO.selectInptntNextVal();
	    String hsptNo = hspt.getHsptNo();
		InptntVO inptnt = new InptntVO();
		
		inptnt.setInptntNo(inptntNo);
		inptnt.setHsptNo(hsptNo);
		inptnt.setManageNo(manageNo);
		
		hsptDAO.insertInptnt(inptnt);
		
		// 3. 진료결과 등록 #dgnssNo, dgnssNote, dgnssResultCode
		hsptDAO.insertDgnssResult(dgnssResult);
		
		// 4. 진료 테이블 수정 #dgnssNo
		hsptDAO.updateDgnssCodeChkd(dgnssNo);
		
		// 5. manage 테이블 수정  #instNm, instNo, sttusCode
		ManageVO manage = new ManageVO();
		manage.setInstNo(hspt.getInstNo());
		manage.setInstNm(hspt.getInstNm());
		manage.setSttusCode("A105");
		
		hsptDAO.updateManageChangeAll(manage);
		
		return msg;
	}

	@Override
	public String registSckbdreqInptntDirectlyByDgnss(DgnssSckbdreqCommand dgnssSckbdreqCommand) throws Exception {
		String msg = "";
		return msg;
	}

	@Override
	public String registSckbdreqIsoptntDirectlyByDgnss(DgnssSckbdreqCommand dgnssSckbdreqCommand) throws Exception {
		String msg = "";
		return msg;
	}

	@Override
	public String registSlfptntDirectlyByDgnss(DgnssSckbdreqCommand dgnssSckbdreqCommand) throws Exception {
		String msg = "";
		return msg;
	}

	@Override
	public String registDgnssResultByIsoptnt(DgnssSckbdreqCommand dgnssSckbdreqCommand) throws Exception {
		String msg = "";
		return msg;
	}

	@Override
	public String registSckbdreqInptntByIsoptnt(DgnssSckbdreqCommand dgnssSckbdreqCommand) throws Exception {
		String msg = "";
		return msg;
	}

	@Override
	public String registInptntByIsoptnt(DgnssSckbdreqCommand dgnssSckbdreqCommand) throws Exception {
		String msg = "";
		return msg;
	}

}
