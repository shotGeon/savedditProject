package com.spring.compass.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.spring.compass.command.PageMaker;
import com.spring.compass.command.SearchCriteria;
import com.spring.compass.dao.AdminDAO;
import com.spring.compass.vo.AttachVO;
import com.spring.compass.vo.HsptVO;
import com.spring.compass.vo.InspVO;
import com.spring.compass.vo.InstVO;
import com.spring.compass.vo.LtctVO;
import com.spring.compass.vo.MberVO;
import com.spring.compass.vo.NoticeVO;
import com.spring.compass.vo.PbhtVO;



public class AdminServiceImpl implements AdminService{
	
	private AdminDAO adminDAO;
	public void setAdminDAO(AdminDAO adminDAO) {
		this.adminDAO = adminDAO;
	}
	
	


	@Override
	public void registInst(InstVO inst) throws Exception {
		adminDAO.insertInst(inst);
	}

	@Override
	public Map<String, Object> getInstListPage(SearchCriteria cri) throws Exception {
		
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<InspVO> inspList = new ArrayList<InspVO>();
		List<PbhtVO> pbhtList = new ArrayList<PbhtVO>();
		List<HsptVO> hsptList = new ArrayList<HsptVO>();
		List<LtctVO> ltctList = new ArrayList<LtctVO>();
		
		PageMaker pageMaker = null;
		
		pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		
		int totalCount = adminDAO.selectAllInstCount(cri);
		
		pageMaker.setTotalCount(totalCount);
		
		List<InstVO> instList = adminDAO.selectAllInst(cri);
		inspList = adminDAO.selectAllInsp();
		pbhtList = adminDAO.selectAllPbht();
		hsptList = adminDAO.selectAllHspt();
		ltctList = adminDAO.selectAllLtct();
		
		for(int i=0; i<instList.size(); i++) {
			String checkDivision=instList.get(i).getChildNo();
			String check = checkDivision.substring(0, 4);
			//System.out.println("-----------------------------------------"+i+check);
			if(check.equals("INSP")) {
				System.out.println("insp---------------------------");
				instList.get(i).setDivision("검사소");
			}
			if(check.equals("PBHT")) {
				System.out.println("pbht---------------------------");
				instList.get(i).setDivision("보건소");
			}
			if(check.equals("HSPT")) {
				instList.get(i).setDivision("병원");
			}
			if(check.equals("LTCT")) {
				instList.get(i).setDivision("생활치료센터");
			}
		}
		dataMap.put("instList", instList);
		dataMap.put("inspList", inspList);
		dataMap.put("pbhtList", pbhtList);
		dataMap.put("hsptList", hsptList);
		dataMap.put("ltctList", ltctList);
		dataMap.put("pageMaker", pageMaker);
		
		return dataMap;
	}




	@Override
	public InstVO getInstDetail(String instNo) throws Exception {
		InstVO inst = adminDAO.selectInstDetail(instNo);
		
		String childNo = inst.getChildNo();
		String checkDivision = childNo.substring(0, 4);
		
		if(checkDivision.equals("INSP")) {
			inst.setDivision("검사소");
		}
		if(checkDivision.equals("PBHT")) {
			inst.setDivision("보건소");
		}
		if(checkDivision.equals("HSPT")) {
			inst.setDivision("병원");
		}
		if(checkDivision.equals("LTCT")) {
			inst.setDivision("생활치료센터");
		}
		
		return inst;
	}




	@Override
	public MberVO getMberDetail(String instNo) throws Exception {
		return null;
	}




	@Override
	public Map<String, Object> getAllInstDetail(String instNo) throws Exception {
		Map<String, Object> instMap = new HashMap<String, Object>();
		InstVO inst = adminDAO.selectInstDetail(instNo);
		
		String childNo = inst.getChildNo();
		String checkDivision = childNo.substring(0, 4);
		
		if(checkDivision.equals("INSP")) {
			inst.setDivision("검사소");
		}
		if(checkDivision.equals("PBHT")) {
			inst.setDivision("보건소");
		}
		if(checkDivision.equals("HSPT")) {
			inst.setDivision("병원");
		}
		if(checkDivision.equals("LTCT")) {
			inst.setDivision("생활치료센터");
		}
		
		List<MberVO> mber = adminDAO.selectMeberByInstNo(instNo);
		
		instMap.put("inst", inst);
		instMap.put("mber", mber);
		
		return instMap;
	}
	

	@Override
	public List<MberVO> getmberList(String instNo) throws Exception {
		List<MberVO> mberList = adminDAO.selectMeberByInstNo(instNo);
		return mberList;
	}




	@Override
	public int modifyInst(InstVO inst) throws Exception {
		int result = adminDAO.updateInst(inst);
		return result;
	}




	@Override
	public String getChildNoByInstNo(String instNo) throws Exception {
		String childNo = adminDAO.selectChildNoByInstNo(instNo);
		return childNo;
	}




	@Override
	public int removeMemberByInstNo(String instNo) throws Exception {
		return adminDAO.deleteMemberByInstNo(instNo);
	}




	@Override
	public int removeInspByInspNo(String inspNo) throws Exception {
		return adminDAO.deleteInspByInspNo(inspNo);
	}




	@Override
	public int removePbhtByPbhtNo(String pbhtNo) throws Exception {
		return adminDAO.deletePbhtByPbhtNo(pbhtNo);
	}

	


	@Override
	public int removeLtctByLtctNo(String ltctNo) throws Exception {
		return adminDAO.deleteLtctByLtctNo(ltctNo);
	}




	@Override
	public int removeInstByInstNo(String instNo) throws Exception {
		return adminDAO.deleteInstByInstNo(instNo);
	}




	@Override
	public int removeHsptByHsptNo(String hsptNo) throws Exception {
		return adminDAO.deleteHsptByHsptNo(hsptNo);
	}




	@Override
	public int removeInspByPbhtNo(String pbhtNo) throws Exception {
		return adminDAO.deleteInspByPbhtNo(pbhtNo);
	}




	@Override
	public String getNoticeSeq() throws Exception {
		return adminDAO.selectNoticeSeq();
	}




	@Override
	public int registNotice(NoticeVO notice) throws Exception {
		return adminDAO.registNotice(notice);
	}
	
	public int registNotice(NoticeVO notice,AttachVO attach) throws Exception {
		int result=adminDAO.registNotice(notice);
		int result2=adminDAO.registAttach(attach);
		return result+result2;
	}




	@Override
	public String getAttachSeq() throws Exception {
		return adminDAO.selectAttchSeq();
	}




	@Override
	public int registAttach(AttachVO attach) throws Exception {
		return adminDAO.registAttach(attach);
	}




	@Override
	public Map<String, Object> getNoticeList(SearchCriteria cri) throws Exception {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		
		List<NoticeVO> noticeList = adminDAO.selectAllNotice(cri);
		
		int totalCount = adminDAO.selectSearchNoticeListCount(cri);
		
		PageMaker pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		pageMaker.setTotalCount(totalCount);
		System.out.println("----------------cri.getPage:"+cri.getPage());
		System.out.println("----------------startPage:"+pageMaker.getStartPage());
		System.out.println("----------------endPage:"+pageMaker.getEndPage());
		System.out.println("----------------realEndPage:"+pageMaker.getRealEndPage());
		System.out.println(pageMaker);
		
		dataMap.put("noticeList", noticeList);
		dataMap.put("pageMaker", pageMaker);
		
		return dataMap;
	}




	@Override
	public NoticeVO getNoticeByNoticeNo(String noticeNo) throws Exception {
		return adminDAO.selectNoticeByNoticeNo(noticeNo);
	}




	@Override
	public AttachVO getAttachByNoticeNo(String noticeNo) throws Exception {
		return adminDAO.selectAttachByNoticeNo(noticeNo);
	}


	@Override
	public void removeNotice(String atchNo, String noticeNo) throws Exception {
		adminDAO.removeAttachByAtchNo(atchNo);
		adminDAO.removeNoticeByNoticeNo(noticeNo);
	}

	@Override
	public void modifyNotice(NoticeVO notice) throws Exception {
		adminDAO.noticeModify(notice);
	}


	@Override
	public void modifyAttach(AttachVO attach) throws Exception {
		adminDAO.attachModify(attach);
	}




	@Override
	public void removeAttachByfileName(String fileName) throws Exception {
		adminDAO.deleteAttachByFileName(fileName);
	}




	@Override
	public String getInstNoByMberNo(String mberNo) throws Exception {
		return adminDAO.selectInstNoByMberNo(mberNo);
	}




	@Override
	public String getInstTelNoByInstNo(String instNo) throws Exception {
		return adminDAO.selectInstTelNoByInstNo(instNo);
	}




	@Override
	public int modifyPasswordMber(MberVO mber) throws Exception {
		return adminDAO.updatePasswordMber(mber);
	}




	@Override
	public MberVO getMberBymberNo(String mberNo) throws Exception {
		MberVO mber = adminDAO.detailMberByMberNo(mberNo);
		return mber;
	}




	





	


}
