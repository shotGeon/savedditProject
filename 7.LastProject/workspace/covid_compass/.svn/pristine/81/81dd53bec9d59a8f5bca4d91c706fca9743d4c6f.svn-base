package com.spring.compass.controller;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.method.support.ModelAndViewContainer;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.spring.compass.command.NoticeModifyCommand;
import com.spring.compass.command.NoticeRegistCommand;
import com.spring.compass.command.SearchCriteria;
import com.spring.compass.command.instRegistCommand;
import com.spring.compass.service.AdminService;
import com.spring.compass.service.HsptService;
import com.spring.compass.service.InspService;
import com.spring.compass.service.LtctService;
import com.spring.compass.service.MberService;
import com.spring.compass.service.PbhtService;
import com.spring.compass.util.FileRegistUtil;
import com.spring.compass.util.LogReadingUtil;
import com.spring.compass.util.MakeFileName;
import com.spring.compass.vo.AttachVO;
import com.spring.compass.vo.HsptVO;
import com.spring.compass.vo.InspVO;
import com.spring.compass.vo.InstVO;
import com.spring.compass.vo.LoginVO;
import com.spring.compass.vo.LtctVO;
import com.spring.compass.vo.MberVO;
import com.spring.compass.vo.NoticeVO;
import com.spring.compass.vo.PbhtVO;

@Controller
@RequestMapping("/admin")
public class AdminController {
	
	@Autowired
	private InspService inspService;
	@Autowired
	private PbhtService pbhtService;
	@Autowired
	private HsptService hsptService;
	@Autowired
	private MberService mberService;
	@Autowired
	private LtctService ltctService;
	@Autowired
	private AdminService adminService;
	
	@Resource(name="instPath")
	private String instPath;
	
	@Resource(name="noticeFilePath")
	private String noticeFilePath;
	
	@Resource(name="loginUserFilePath")
	private String savePath;
	
	@Resource(name="loginUserFileName")
	private String loginFileName;
	
	@RequestMapping("main")
	public String adminMain() {
		String url="admin/main";
		return url;
	}

	@RequestMapping("/inst-list")
	public String insttList(){
		String url="admin/inst-list";
		return url;
	}
	@RequestMapping("/error-log-list")
	public String error() {
		String url="admin/errorlogPage";
		return url;
	}
	@RequestMapping("/access-log-list")
	public ModelAndView access(ModelAndView mnv, @RequestParam(defaultValue="1")int page
												,@RequestParam(defaultValue="15")int perPageNum
												,@RequestParam(defaultValue="")String searchType
												,@RequestParam(defaultValue="")String keyword)throws Exception{
		SearchCriteria cri = new SearchCriteria(page, perPageNum, searchType, keyword);
		Map<String, Object> dataMap = new HashMap<String, Object>();
//		int checkpage=1;
//		if(page >= 1) {
//			checkpage=page;
//		}
		String url="admin/accesslogPage";
		dataMap = LogReadingUtil.getLogList(savePath, loginFileName, cri);
		mnv.addObject("dataMap", dataMap);
//		for(LoginVO login : loginList) {
//			System.out.println("******************"+login);
//		}
		mnv.setViewName(url);
		return mnv;
	}
	@RequestMapping("/loginFileDownload")
	public String loginFileDown(Model model) {
		String url="downloadFile";
		
		model.addAttribute("fileName",loginFileName);
		model.addAttribute("savePath",savePath);
		
		return url;
	}

	@RequestMapping("/inst-registForm")
	public String insttRegistForm() {
		String url="admin/inst-registForm";

		return url;
	}
	@RequestMapping("/admin-emp-modifyForm")
	public String admin_emp() {
		String url = "admin/admin-emp-modifyForm";
		return url;
	}

	@RequestMapping("/notice-list")
	public ModelAndView admin_notice(@RequestParam(defaultValue="1")int page,
									 @RequestParam(defaultValue="15")int perPageNum,
									 @RequestParam(defaultValue="")String searchType,
									 @RequestParam(defaultValue="")String keyword,
									 ModelAndView mnv) throws Exception{
		SearchCriteria cri = new SearchCriteria(page, perPageNum, searchType, keyword);
		String url = "admin/notice-list";
		System.out.println("searchType:"+cri.getSearchType());
		System.out.println("keyword"+cri.getKeyword());
		Map<String, Object> dataMap = adminService.getNoticeList(cri);
		mnv.addObject("dataMap",dataMap);
		mnv.setViewName(url);
		return mnv;
	}
	@RequestMapping("/notice-detail")
	public ModelAndView admin_detail(String noticeNo, ModelAndView mnv) throws Exception{
		String url = "admin/notice-detail";
		//System.out.println("noticeNo:"+noticeNo);
		
		NoticeVO notice = adminService.getNoticeByNoticeNo(noticeNo);
		AttachVO attach = adminService.getAttachByNoticeNo(noticeNo);
		if(attach !=null) {
			String fileName = attach.getFileName();
			String originalFileName =fileName.split("\\$\\$")[1];
			mnv.addObject("originalFileName", originalFileName);
			mnv.addObject("fileName", fileName);
		}
		mnv.addObject("notice", notice);
		mnv.setViewName(url);
		return mnv;
	}
	@RequestMapping("/notice-registForm")
	public String noticeRegistForm() {
		String url="admin/notice-registForm";
		
		return url;
	}
	@RequestMapping("/notice-modifyForm")
	public ModelAndView noticeModifyForm(String noticeNo, ModelAndView mnv) throws Exception {
		String url="admin/notice-modifyForm";
		NoticeVO notice = adminService.getNoticeByNoticeNo(noticeNo);
		AttachVO attach = adminService.getAttachByNoticeNo(noticeNo);
		if(attach !=null) {
			String fileName = attach.getFileName();
			String originalFileName =fileName.split("\\$\\$")[1];
			mnv.addObject("originalFileName", originalFileName);
			mnv.addObject("fileName", fileName);
		}
		SimpleDateFormat smformat = new SimpleDateFormat("yyy-MM-dd");
		String startDate =smformat.format(notice.getStartYmd());
		String endDate=smformat.format(notice.getEndYmd());
		mnv.addObject("notice", notice);
		mnv.addObject("startDate", startDate);
		mnv.addObject("endDate", endDate);
		mnv.setViewName(url);
		return mnv;
	}
	@RequestMapping("/notice-modify")
	public String noticeModify(HttpServletRequest req, NoticeModifyCommand noticeModifyCommand) throws Exception{
		String url="admin/notice-modifySuccess";
		HttpSession session = req.getSession();
		MberVO mber = (MberVO) session.getAttribute("loginUser");
		String mberNo = mber.getMberNo();
		NoticeVO notice = noticeModifyCommand.toNoticeVo(mberNo);
		MultipartFile noticeFile = noticeModifyCommand.getNoticeModifyFile();
		System.out.println("check--------------------"+noticeModifyCommand.getDeleteFileCheck());
		String deleteFileCheck = noticeModifyCommand.getDeleteFileCheck();
		if(deleteFileCheck.equals("YES")) {
			adminService.removeAttachByfileName(noticeModifyCommand.getDeleteFileName());
		}
		if(noticeFile.getOriginalFilename().length()<1) {
			adminService.modifyNotice(notice);
		}
		if(noticeFile.getOriginalFilename().length()>1) {
			System.out.println("NoticeModifyfileName:"+noticeFile.getOriginalFilename());
			System.out.println("startYmd:"+noticeModifyCommand.getStartYmd());
			System.out.println("endYmd:"+noticeModifyCommand.getEndDate());
			//MakeFileName.toUUIDFileName(noticeFile.getOriginalFilename(), delimiter);
			String fileName=FileRegistUtil.fileRegist(noticeFile, noticeFilePath);
			adminService.removeAttachByfileName(noticeModifyCommand.getDeleteFileName());
			adminService.modifyNotice(notice);
			AttachVO attach = new AttachVO();
			String attachNo = adminService.getAttachSeq();
			attach.setAtchNo(attachNo);
			attach.setUploadPath(noticeFilePath);
			attach.setFileName(fileName);
			attach.setNoticeNo(notice.getNoticeNo());
			attach.setMberNo(mberNo);
			adminService.registAttach(attach);
			
		}
		
		return url;
	}
	
	
	@RequestMapping("/notice-regist")
	public String noticeRegist(HttpServletRequest req, NoticeRegistCommand noticeCommand)throws Exception{
		String url="admin/notice-registSuccess";
		AttachVO attach = new AttachVO();
		HttpSession session = req.getSession();
		MberVO loginUser = (MberVO) session.getAttribute("loginUser");
		String mberNo = loginUser.getMberNo();
		MultipartFile noticeFile = noticeCommand.getNoticeFile();
		String noticeNo = adminService.getNoticeSeq();
		NoticeVO notice=noticeCommand.toNoticeVo(noticeNo, mberNo);
		int resultNotice = adminService.registNotice(notice);
		if(resultNotice<1) url="admin/notice-registFail";
		
		if(noticeFile.getOriginalFilename().length()>1) {
			String fileName = FileRegistUtil.fileRegist(noticeFile, noticeFilePath);
			String attachNo = adminService.getAttachSeq();
			attach.setAtchNo(attachNo);
			attach.setUploadPath(noticeFilePath);
			attach.setFileName(fileName);
			attach.setNoticeNo(noticeNo);
			attach.setMberNo(mberNo);
			int resultAttach = adminService.registAttach(attach);
			if(resultAttach<1) url="admin/notice-registFail";
		}
		
		return url;
	}
	
	@RequestMapping(value="/getFile", method=RequestMethod.GET)
	public String getFile(String fileName, Model model) {
		String url="downloadFile";
		//System.out.println("---------------------fileName:"+fileName);
		model.addAttribute("fileName", fileName);
		model.addAttribute("savePath", noticeFilePath);
		return url;
	}
	
	@RequestMapping(value="/notice-remove", method=RequestMethod.GET)
	public String noticeRemove(String noticeNo) throws Exception{
		String url="admin/noticeRemoveSuccess";
		//System.out.println("noticeNo:"+noticeNo);
		AttachVO attach = adminService.getAttachByNoticeNo(noticeNo);
		String atchNo = attach.getAtchNo();
		adminService.removeNotice(atchNo, noticeNo);
		
		return url;
	}

	@RequestMapping(value="/inst-selfRegist", method=RequestMethod.POST)
	public String selfInstRegist(instRegistCommand registCommand)throws Exception{
		InspVO insp = new InspVO();
		PbhtVO pbht = new PbhtVO();
		HsptVO hstp = new HsptVO();
		LtctVO ltct = new LtctVO();
		InstVO inst = new InstVO();
		MberVO mber = new MberVO();
		String url="admin/inst-registSuccess";
		System.out.println("기관 직접등록");
		String writer=registCommand.getWriter();
		String checkInst = registCommand.getInst();
		String instCall=registCommand.getInstCall();
		String checkAdres = registCommand.getInstAdres();
		String instNm = registCommand.getInstName();
		String resAgency =registCommand.getResAgency();
		
		String changeAdres = checkAdres.substring(0, checkAdres.indexOf(" "));
		
		System.out.println("instNm:"+instNm);
		System.out.println("changeAdres:"+changeAdres);
		System.out.println("changeAdresLength:"+changeAdres.length());
		System.out.println("writer:"+writer);
		System.out.println("inst:"+checkInst);
		System.out.println("isntCall:"+instCall);
		System.out.println("instAdres:"+checkAdres);
		
		switch (checkInst) {
		case "검사소":
			String cityNoInsp = inspService.getInspCityNo(changeAdres);
			String responsibleAgency = resAgency;
			String inspSeqNo = inspService.getInspSeqNo();
			String instSeqNo = inspService.getInstSeqNo();
			System.out.println("isntSeq:"+instSeqNo);
			String instNoInsp = "INST" + "01" + instSeqNo;
			String inspNo = "INSP"+cityNoInsp+inspSeqNo;
			String pbhtNoByInsp = "PBHT042103083";
			
			insp.setPbhtNo(pbhtNoByInsp);
			insp.setCityNo(cityNoInsp);
			insp.setInspNo(inspNo);
			insp.setInstAdres(checkAdres);
			insp.setInstNm(instNm);
			insp.setInstNo(instNoInsp);
			insp.setInstTelno(instCall);
			insp.setInstCode("C101");
			
			inst.setInstNo(instNoInsp);
			inst.setInstCode("C101");
			inst.setChildNo(inspNo);
			inst.setInstNm(instNm);
			inst.setInstTelno(instCall);
			inst.setInstAdres(checkAdres);
			
			String mberNoInsp = mberService.getMberSeq();
			String mberIdInsp = changeAdres+instNm.replaceAll(" ", "");
			String instTelnoInsp = instCall;
			String mberPwdInsp=instTelnoInsp.replaceAll("-", "");
			
			mber.setMberNo(mberNoInsp);
			mber.setInstNo(instNoInsp);
			mber.setMberCode("B121");
			mber.setMberId(mberIdInsp);
			mber.setMberPwd(mberPwdInsp);
			mber.setMberTelno(instTelnoInsp);
			mber.setMberNm(instNm);
			mber.setMberAdres(checkAdres);
			
			int resultRegistInsp = inspService.registInsp(insp);
			adminService.registInst(inst);
			mberService.registMberRepresent(mber);
			
			break;
		case "보건소":
			String cityNo = pbhtService.getPbhtCityNo(changeAdres);
			int pbhtSeq = pbhtService.getPbhtSeqNo();
			int instSeq = pbhtService.getInstSeqNo();
			String pbhtNo = "PBHT"+cityNo+pbhtSeq;
			String instNo = "INST"+"02"+instSeq;
			
			pbht.setCityNo(cityNo);
			pbht.setPbhtNo(pbhtNo);
			pbht.setInstNo(instNo);
			
			pbht.setInstAdres(checkAdres);
			pbht.setInstNm(instNm);
			pbht.setInstTelno(instCall);
			
			inst.setInstNo(instNo);
			inst.setInstCode("C102");
			inst.setChildNo(pbhtNo);
			inst.setInstNm(instNm);
			inst.setInstTelno(instCall);
			inst.setInstAdres(checkAdres);
			
			String mberNo = mberService.getMberSeq();
			String mberId = changeAdres+instNm.replaceAll(" ", "");
			String instTelno = instCall;
			String mberPwd=instTelno.replaceAll("-", "");
			
			mber.setMberNo(mberNo);
			mber.setInstNo(instNo);
			mber.setMberCode("B122");
			mber.setMberId(mberId);
			mber.setMberPwd(mberPwd);
			mber.setMberTelno(instTelno);
			mber.setMberNm(instNm);
			mber.setMberAdres(checkAdres);
			
			int resultRegistPbht = pbhtService.registPbht(pbht);
			adminService.registInst(inst);
			mberService.registMberRepresent(mber);
			break;

		case "병원":
			break;
			
		case "생활치료센터":
			break;	
		}
		return url;
	}


	private List<Map<String, String>> instList;
	@RequestMapping(value="/inst-fileRegist", method=RequestMethod.POST)
	public String insttRegist(instRegistCommand registCommand)throws Exception{
		String url="admin/inst-registSuccess";
		String writer=registCommand.getWriter();
		String instName = registCommand.getInst();
		String fileName =registCommand.getFileName();

		
		//확장자확인
		String extension = fileName.substring(fileName.lastIndexOf(".")+1, fileName.length());
		
		String filePath = instPath+fileName;
		
		File file = new File(filePath);
		if(!file.exists()) {
			file.mkdirs();
		}
		
		MultipartFile instFile = registCommand.getInstFile();
		
		instFile.transferTo(file);
		
		System.out.println("filePath:"+filePath);
		if(extension.equals("xlsx")) {
			instList =new registFileResolver().registInstXlsxFile(filePath);
		}
		if(extension.equals("xls")) {
			instList =new registFileResolver().registInstXlsFile(filePath);
		}
		
		switch (instName) {
		case "검사소":
			for(int i=0; i<instList.size(); i++) {
				InspVO insp = new InspVO();
				InstVO inst = new InstVO();
				MberVO mber = new MberVO();
				Map<String, String> needDataMap = instList.get(i);
				//System.out.println(i+"행---시도:"+test.get("city")+",주소:"+test.get("instAdres")+",전화:"+test.get("instTelNo")+",이름:"+test.get("instNm"));
				String city = needDataMap.get("city");
				String cityNo = inspService.getInspCityNo(city);
				String responsibleAgency = needDataMap.get("responsibleAgency");
				String pbhtNo = inspService.getResponsibleAgency(responsibleAgency);
				
				//System.out.println("cityNo:"+cityNo);
				String inspSeqNo = inspService.getInspSeqNo();
				String instSeqNo = inspService.getInstSeqNo();
				System.out.println("isntSeq:"+instSeqNo);
				String instNo = "INST" + "01" + instSeqNo;
				String inspNo = "INSP"+cityNo+inspSeqNo;
				
				insp.setPbhtNo(pbhtNo);
				insp.setCityNo(cityNo);
				insp.setInspNo(inspNo);
				insp.setInstAdres(needDataMap.get("instAdres"));
				insp.setInstNm(needDataMap.get("instNm"));
				insp.setInstNo(instNo);
				insp.setInstTelno(needDataMap.get("instTelNo"));
				insp.setInstCode("C101");
				
				inst.setInstNo(instNo);
				inst.setInstCode("C101");
				inst.setChildNo(inspNo);
				inst.setInstNm(needDataMap.get("instNm"));
				inst.setInstTelno(needDataMap.get("instTelNo"));
				inst.setInstAdres(needDataMap.get("instAdres"));
				
				String mberNo = mberService.getMberSeq();
				String mberId = city+ needDataMap.get("instNm").replaceAll(" ", "");
				String instTelno = needDataMap.get("instTelNo");
				String mberPwd=instTelno.replaceAll("-", "");
				mber.setMberNo(mberNo);
				mber.setInstNo(instNo);
				mber.setMberCode("B121");
				mber.setMberId(mberId);
				mber.setMberPwd(mberPwd);
				mber.setMberTelno(needDataMap.get("instTelNo"));
				mber.setMberNm(needDataMap.get("instNm"));
				mber.setMberAdres(needDataMap.get("instAdres"));
				
				int resultRegistInsp = inspService.registInsp(insp);
				adminService.registInst(inst);
				mberService.registMberRepresent(mber);
				
			}
			break;

		case "보건소":
			for(int i=0; i<instList.size(); i++) {
				PbhtVO pbht = new PbhtVO();
				InstVO inst = new InstVO();
				MberVO mber = new MberVO();
				Map<String, String> needDataMap = instList.get(i);
				String city = needDataMap.get("city");
				String cityNo = pbhtService.getPbhtCityNo(city);
				int pbhtSeq = pbhtService.getPbhtSeqNo();
				int instSeq = pbhtService.getInstSeqNo();
				String pbhtNo = "PBHT"+cityNo+pbhtSeq;
				String instNo = "INST"+"02"+instSeq;
				
				pbht.setCityNo(cityNo);
				pbht.setPbhtNo(pbhtNo);
				pbht.setInstNo(instNo);
				pbht.setInstAdres(needDataMap.get("instAdres"));
				pbht.setInstNm(needDataMap.get("instNm"));
				pbht.setInstTelno(needDataMap.get("instTelNo"));
				
				inst.setInstNo(instNo);
				inst.setInstCode("C102");
				inst.setChildNo(pbhtNo);
				inst.setInstNm(needDataMap.get("instNm"));
				inst.setInstTelno(needDataMap.get("instTelNo"));
				inst.setInstAdres(needDataMap.get("instAdres"));
				
				String mberNo = mberService.getMberSeq();
				String mberId = city+needDataMap.get("instNm").replaceAll(" ", "");
				String instTelno = needDataMap.get("instTelNo");
				String mberPwd=instTelno.replaceAll("-", "");
				mber.setMberNo(mberNo);
				mber.setInstNo(instNo);
				mber.setMberCode("B122");
				mber.setMberId(mberId);
				mber.setMberPwd(mberPwd);
				mber.setMberTelno(needDataMap.get("instTelNo"));
				mber.setMberNm(needDataMap.get("instNm"));
				mber.setMberAdres(needDataMap.get("instAdres"));
				
				int resultRegistPbht = pbhtService.registPbht(pbht);
				adminService.registInst(inst);
				mberService.registMberRepresent(mber);
			}
			break;
		
		
		case "병원":
			System.out.println("병원등록~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			for(int i=0; i<instList.size(); i++) {
				HsptVO hspt = new HsptVO();
				MberVO mber = new MberVO();
				InstVO inst = new InstVO();
				Map<String, String> needDataMap = instList.get(i);
				String city = needDataMap.get("city");
				String cityNo = hsptService.getHsptCityNo(needDataMap.get("city"));
				int hsptSeq = hsptService.getHsptSeqNo();
				int instSeq = hsptService.getInstSeqNo();
				String hsptNo = "HSPT"+cityNo+hsptSeq;
				String instNo = "INST"+"03"+instSeq;
				hspt.setCityNo(cityNo);
				hspt.setHsptNo(hsptNo);
				hspt.setInstNo(instNo);
				hspt.setInstAdres(needDataMap.get("instAdres"));
				hspt.setInstNm(needDataMap.get("instNm"));
				hspt.setInstTelno(needDataMap.get("instTelNo"));
				
				inst.setInstNo(instNo);
				inst.setInstCode("C103");
				inst.setChildNo(hsptNo);
				inst.setInstNm(needDataMap.get("instNm"));
				inst.setInstTelno(needDataMap.get("instTelNo"));
				inst.setInstAdres(needDataMap.get("instAdres"));
				
				String mberNo = mberService.getMberSeq();
				String mberId = city+ needDataMap.get("instNm").replaceAll(" ", "");
				String instTelno = needDataMap.get("instTelNo");
				String mberPwd=instTelno.replaceAll("-", "");
				mber.setMberNo(mberNo);
				mber.setInstNo(instNo);
				mber.setMberCode("B123");
				mber.setMberId(mberId);
				mber.setMberPwd(mberPwd);
				mber.setMberTelno(needDataMap.get("instTelNo"));
				mber.setMberNm(needDataMap.get("instNm"));
				mber.setMberAdres(needDataMap.get("instAdres"));
				
				int resultRegistHspt = hsptService.registHspt(hspt);
				adminService.registInst(inst);
				mberService.registMberRepresent(mber);
			}
			
			break;
		
		case "생활치료센터":
			System.out.println("생활치료센터 등록~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("instList.size(" +instList.size());
			for(int i=0; i<instList.size(); i++) {
				LtctVO ltct = new LtctVO();
				MberVO mber = new MberVO();
				InstVO inst = new InstVO();
				
				Map<String, String> needDataMap = instList.get(i);
				String city = needDataMap.get("city");
				String cityNo = ltctService.getLtctCityNo(needDataMap.get("city"));
				int ltctSeq = ltctService.getLtctSeqNo();
				int instSeq = ltctService.getInstSeqNo();
				String ltctNo = "LTCT"+cityNo+ltctSeq;
				String instNo = "INST"+"04"+instSeq;
				ltct.setCityNo(cityNo);
				ltct.setLtctNo(ltctNo);
				ltct.setInstNo(instNo);
				ltct.setInstAdres(needDataMap.get("instAdres"));
				ltct.setInstNm(needDataMap.get("instNm"));
				ltct.setInstTelno(needDataMap.get("instTelNo"));
				
				inst.setInstNo(instNo);
				inst.setInstCode("C104");
				inst.setChildNo(ltctNo);
				inst.setInstNm(needDataMap.get("instNm"));
				inst.setInstTelno(needDataMap.get("instTelNo"));
				inst.setInstAdres(needDataMap.get("instAdres"));
				
				String mberNo = mberService.getMberSeq();
				String mberId = city + needDataMap.get("instNm").replaceAll(" ", "");
				String instTelno = needDataMap.get("instTelNo");
				String mberPwd=instTelno.replaceAll("-", "");
				mber.setMberNo(mberNo);
				mber.setInstNo(instNo);
				mber.setMberCode("B124");
				mber.setMberId(mberId);
				mber.setMberPwd(mberPwd);
				mber.setMberTelno(needDataMap.get("instTelNo"));
				mber.setMberNm(needDataMap.get("instNm"));
				mber.setMberAdres(needDataMap.get("instAdres"));
				
				ltctService.registLtct(ltct);
				adminService.registInst(inst);
				
				mberService.registMberRepresent(mber);
			}
			break;
		
	 }
		return url;
	}
	
	@RequestMapping("/inst-detail")
	@ResponseBody
	public ResponseEntity<Map<String, Object>> instDetail(@RequestParam("instNo") String instNo) {
		ResponseEntity<Map<String, Object>> entity = null;
		Map<String, Object> instMap = new HashMap<String, Object>();
		try {
			instMap = adminService.getAllInstDetail(instNo);
			entity = new ResponseEntity<Map<String,Object>>(instMap, HttpStatus.OK);
		} catch (Exception e) {
			entity = new ResponseEntity<Map<String,Object>>(HttpStatus.INTERNAL_SERVER_ERROR);
			e.printStackTrace();
		}
		
		return entity;
	}
	
	@RequestMapping("/inst-modifyForm")
	public ModelAndView instModifyForm(String instNo, ModelAndView mnv) throws Exception{
		InstVO inst = adminService.getInstDetail(instNo);
		String url="admin/inst-modifyForm";
		
		mnv.addObject("inst", inst);
		mnv.setViewName(url);
		
		return mnv;
	}
	@RequestMapping("/inst-modify")
	public String instModify(InstVO inst) throws Exception{
		String url="admin/inst-modifySuccess";
		
		int result = adminService.modifyInst(inst);
		
		if(result<1) {
			url="admin/inst-modifyFail";
		}
		
		return url;
	}
	
	@RequestMapping("/inst-remove")
	public String instRemove(String[] deleteValues) throws Exception{
		String url="admin/instRemoveSuccess";
		for(int i=0; i<deleteValues.length; i++) {
			//System.out.println(deleteValues[i]);
			String instNo = deleteValues[i];
			String childNo = adminService.getChildNoByInstNo(instNo);
			System.out.println("instNo:"+instNo);
			System.out.println("childNo:"+childNo);
			String checkInst = childNo.substring(0, 4);
			switch (checkInst) {
			case "INSP":
				int resultMber = adminService.removeMemberByInstNo(instNo);
				int resultInsp = adminService.removeInspByInspNo(childNo);
				int resultInst = adminService.removeInstByInstNo(instNo);
				break;
			case "PBHT":
				int resultMberPb = adminService.removeMemberByInstNo(instNo);
				int resultInspPb = adminService.removeInspByPbhtNo(childNo);
				int resultPbht = adminService.removePbhtByPbhtNo(childNo);
				int resultInstPb = adminService.removeInstByInstNo(instNo);
				break;
			case "HSPT":
				int resultMberHt = adminService.removeMemberByInstNo(instNo);
				int resultHspt = adminService.removeHsptByHsptNo(childNo);
				int resultInstHt = adminService.removeInstByInstNo(instNo);
				break;
			case "LTCT":
				int resultMberLt = adminService.removeMemberByInstNo(instNo);
				int resultLtct = adminService.removeLtctByLtctNo(childNo);
				int resultInstLt = adminService.removeInstByInstNo(instNo);
				break;
			}
		}
		return url;
	}
	
	@RequestMapping(value="/passwordReset", method=RequestMethod.GET)
	@ResponseBody
	public ResponseEntity<Map<String, String>> passwordReset(String mberNo, HttpServletResponse response) throws Exception{
		String result ="수정되었습니다.";
		ResponseEntity<Map<String, String>> entity = null;
		Map<String, String> msg = new HashMap<String, String>();
		System.out.println("mberNo:"+mberNo);
		String instNo = adminService.getInstNoByMberNo(mberNo);
		String instTelnofir = adminService.getInstTelNoByInstNo(instNo);
		
		String instTelno = instTelnofir.replaceAll("-", "");
		
		MberVO mber = new MberVO();
		mber.setMberNo(mberNo);
		mber.setMberPwd(instTelno);
		
		int check = adminService.modifyPasswordMber(mber);
		System.out.println("========================================");
		msg.put("msg", result);
		entity = new ResponseEntity<Map<String, String>>(msg,HttpStatus.OK);
		System.out.println(check);
		if(check<1) {
			result="수정 실패했습니다.";
			entity = new ResponseEntity<Map<String, String>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		return entity;
	}
	
	
		


}
