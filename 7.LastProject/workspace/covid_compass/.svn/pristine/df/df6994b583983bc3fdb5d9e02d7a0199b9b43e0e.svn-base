package com.spring.compass.controller;

import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.spring.compass.command.LtctSckbdCountAndStats;
import com.spring.compass.command.LtctSckbdreqOkCommand;
import com.spring.compass.command.LtctSearchCommand;
import com.spring.compass.command.LtctUpdateSckbdCntCommand;
import com.spring.compass.service.LtctService;
import com.spring.compass.vo.IsoptntVO;
import com.spring.compass.vo.LtctBasicDetailVO;
import com.spring.compass.vo.LtctVO;

@RestController
@RequestMapping("/rest-ltct")
public class RestLtctController {
	
	@Autowired
	private LtctService ltctService;
	
	@RequestMapping(value="/sckbdreq-return")
	public void sckbdreqReturn(String manageNo, HttpSession session) throws Exception{
		
		LtctVO ltct = (LtctVO) session.getAttribute("loginInst");
		String ltctNo = ltct.getLtctNo();
		ltctService.modifySckbdreqReturn(manageNo, ltctNo);
	}
	
	@RequestMapping(value="/sckbdreq-ok")
	public void sckbdreqOk(String datas, HttpSession session) throws Exception{
		LtctSckbdreqOkCommand sckbdreq = new LtctSckbdreqOkCommand();
		String[] data = datas.split(",");
		String manageNo = data[0];
		String hsptNo =  data[1];
//		 				36.00001 ~ 36.99999          0.00001 ~ 0.99999
		double temp = (Math.floor(((Math.random()+36) + (Math.random()*2))* 10) ) / 10;
		LtctVO ltct = (LtctVO) session.getAttribute("loginInst");
		String ltctNo = ltct.getLtctNo();
		String instNo = ltct.getInstNo();
		String instNm = ltct.getInstNm();
		
		
		sckbdreq.setManageNo(manageNo);
		sckbdreq.setHsptNo(hsptNo);
		sckbdreq.setBdtemp(temp);
		sckbdreq.setLtctNo(ltctNo);
		sckbdreq.setInstNo(instNo);
		sckbdreq.setInstNm(instNm);
		ltctService.registSckbdreqOk(sckbdreq);
	}
	
	@RequestMapping(value="/sckbd-cnt-modify")
	public ResponseEntity<String> sckbdCntModify(HttpSession session, int sckbdCnt) throws Exception{
		ResponseEntity<String> entity = null;
		
		LtctVO ltct = (LtctVO) session.getAttribute("loginInst");
		LtctUpdateSckbdCntCommand sckbdCntCommand = new LtctUpdateSckbdCntCommand();
		sckbdCntCommand.setLtctNo(ltct.getLtctNo());
		sckbdCntCommand.setSckbdCnt(sckbdCnt);
		try {
			ltctService.modifySckbdCnt(sckbdCntCommand);
			entity = new ResponseEntity<String>(HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		return entity;
	}
	
	@RequestMapping("main-sckbdCountAndStats")
	public ResponseEntity<LtctSckbdCountAndStats> sckbdCountAndStats(HttpSession session) throws Exception{
		ResponseEntity<LtctSckbdCountAndStats> entity = null;
		
		LtctVO ltct = (LtctVO) session.getAttribute("loginInst");
		String ltctNo = ltct.getLtctNo();
		try {
			LtctSckbdCountAndStats sckbdCountAndStats = ltctService.getSckbdCountAndStats(ltctNo);
			entity = new ResponseEntity<LtctSckbdCountAndStats>(sckbdCountAndStats, HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<LtctSckbdCountAndStats>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		return entity;
	}
	
	// 입소자 상세조회
	@RequestMapping("/isoptnt-detail")
	public ResponseEntity<IsoptntVO> isoptntDetail(String manageNo) throws Exception{
		ResponseEntity<IsoptntVO> entity = null;
		try {
//			??VO isoptnt = ltctService.getPstiDetail(manageNo);
//			entity = new ResponseEntity<??VO>(isoptnt, HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<IsoptntVO>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		return entity;
	}
	// 생활치료센터 기본적인 상세조회
	@RequestMapping("/manage-detail")
	public ResponseEntity<LtctBasicDetailVO> resDetail(String manageNo) throws Exception{
		ResponseEntity<LtctBasicDetailVO> entity = null;
		try {
			LtctBasicDetailVO basicDetail = ltctService.getBasicDetail(manageNo);
			entity = new ResponseEntity<LtctBasicDetailVO>(basicDetail, HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<LtctBasicDetailVO>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return entity;
	}
	// 병상신청 상세조회
	@RequestMapping("/sckbd-detail")
	public ResponseEntity<LtctBasicDetailVO> sckbdDetail(String manageNo) throws Exception{
		ResponseEntity<LtctBasicDetailVO> entity = null;
		try {
			LtctBasicDetailVO basicDetail = ltctService.getBasicDetail(manageNo);
			LtctBasicDetailVO sckbdreqYmd = ltctService.getSckbdreqYmd(manageNo);
			basicDetail.setSckbdreqYmd(sckbdreqYmd.getSckbdreqYmd());
			basicDetail.setHsptNo(sckbdreqYmd.getHsptNo());
			entity = new ResponseEntity<LtctBasicDetailVO>(basicDetail, HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<LtctBasicDetailVO>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		return entity;
	}
	
	// 입소자 목록
	@RequestMapping("/isoptnt-list") // isoptnt-list-module-work 입소자(메뉴)
	public ResponseEntity<Map<String, Object>> isoptntList(@RequestParam(defaultValue="1")int page,
														@RequestParam(defaultValue="15")int perPageNum,
														@RequestParam(defaultValue="")String searchType,
														@RequestParam(defaultValue="")String keyword,
														HttpSession session) throws Exception{
		ResponseEntity<Map<String, Object>> entity = null;
		LtctSearchCommand cri = new LtctSearchCommand(page, perPageNum, searchType, keyword);
		LtctVO ltct = (LtctVO)(session.getAttribute("loginInst"));
		cri.setLtctNo(ltct.getLtctNo());
		try {
			Map<String, Object> dataMap = ltctService.getIsoptntListPage(cri);
			entity = new ResponseEntity<Map<String, Object>>(dataMap, HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String, Object>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return entity;
	}
	//메인 입소자
	@RequestMapping("/main-isoptnt-list") // isoptnt-list-module-work 입소자(메뉴)
	public ResponseEntity<Map<String, Object>> mainIsoptntList(@RequestParam(defaultValue="1")int page,
																@RequestParam(defaultValue="5")int perPageNum,
																@RequestParam(defaultValue="")String searchType,
																@RequestParam(defaultValue="")String keyword,
																HttpSession session) throws Exception{
		ResponseEntity<Map<String, Object>> entity = null;
		LtctSearchCommand cri = new LtctSearchCommand(page, perPageNum, searchType, keyword);
		LtctVO ltct = (LtctVO)(session.getAttribute("loginInst"));
		cri.setLtctNo(ltct.getLtctNo());
		try {
			Map<String, Object> dataMap = ltctService.getIsoptntListPage(cri);
			entity = new ResponseEntity<Map<String, Object>>(dataMap, HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String, Object>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return entity;
	}
	// 재검결과 목록
	@RequestMapping("/res-list") // res-list-module-work 재검결과(메뉴)
	public ResponseEntity<Map<String, Object>> resList(@RequestParam(defaultValue="1")int page,
														@RequestParam(defaultValue="15")int perPageNum,
														@RequestParam(defaultValue="")String searchType,
														@RequestParam(defaultValue="")String keyword,
														HttpSession session) throws Exception{
		ResponseEntity<Map<String, Object>> entity = null;
		LtctSearchCommand cri = new LtctSearchCommand(page, perPageNum, searchType, keyword);
		LtctVO ltct = (LtctVO)(session.getAttribute("loginInst"));
		cri.setLtctNo(ltct.getLtctNo());
		try {
			Map<String, Object> dataMap = ltctService.getResListPage(cri);
			entity = new ResponseEntity<Map<String, Object>>(dataMap, HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String, Object>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return entity;
	}
	// main 결과
	@RequestMapping("/main-res-list") // res-list-module-work 재검결과(메뉴)
	public ResponseEntity<Map<String, Object>> mainResList(@RequestParam(defaultValue="1")int page,
														@RequestParam(defaultValue="5")int perPageNum,
														@RequestParam(defaultValue="")String searchType,
														@RequestParam(defaultValue="")String keyword,
														HttpSession session) throws Exception{
		ResponseEntity<Map<String, Object>> entity = null;
		LtctSearchCommand cri = new LtctSearchCommand(page, perPageNum, searchType, keyword);
		LtctVO ltct = (LtctVO)(session.getAttribute("loginInst"));
		cri.setLtctNo(ltct.getLtctNo());
		try {
			Map<String, Object> dataMap = ltctService.getResListPage(cri);
			entity = new ResponseEntity<Map<String, Object>>(dataMap, HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String, Object>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return entity;
	}
	// 병상신청 승인목록
	@RequestMapping("/sckbd-list") // sckbd-list-module-work 병상승인신청(메뉴)
	public ResponseEntity<Map<String, Object>> sckbdList(@RequestParam(defaultValue="1")int page,
														@RequestParam(defaultValue="15")int perPageNum,
														@RequestParam(defaultValue="")String searchType,
														@RequestParam(defaultValue="")String keyword,
														HttpSession session) throws Exception{
		ResponseEntity<Map<String, Object>> entity = null;
		LtctSearchCommand cri = new LtctSearchCommand(page, perPageNum, searchType, keyword);
		LtctVO ltct = (LtctVO)(session.getAttribute("loginInst"));
		cri.setLtctNo(ltct.getLtctNo());
		try {
			Map<String, Object> dataMap = ltctService.getSckbdListPage(cri);
			entity = new ResponseEntity<Map<String, Object>>(dataMap, HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String, Object>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return entity;
	}
	// main 병원 신청목록
	@RequestMapping("/main-sckbd-list") // sckbd-list-module-work 병상승인신청(메뉴)
	public ResponseEntity<Map<String, Object>> mainSckbdList(@RequestParam(defaultValue="1")int page,
															@RequestParam(defaultValue="5")int perPageNum,
															@RequestParam(defaultValue="")String searchType,
															@RequestParam(defaultValue="")String keyword,
															HttpSession session) throws Exception{
		ResponseEntity<Map<String, Object>> entity = null;
		LtctSearchCommand cri = new LtctSearchCommand(page, perPageNum, searchType, keyword);
		LtctVO ltct = (LtctVO)(session.getAttribute("loginInst"));
		cri.setLtctNo(ltct.getLtctNo());
		try {
			Map<String, Object> dataMap = ltctService.getSckbdListPage(cri);
			entity = new ResponseEntity<Map<String, Object>>(dataMap, HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String, Object>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return entity;
	}
	
	@RequestMapping("/pbht-list")
	public ResponseEntity<Map<String, Object>> pbhtList(@RequestParam(defaultValue="1")int page,
														@RequestParam(defaultValue="15")int perPageNum,
														@RequestParam(defaultValue="")String searchType,
														@RequestParam(defaultValue="")String keyword,
														HttpSession session) throws Exception{
		ResponseEntity<Map<String, Object>> entity = null;
		LtctSearchCommand cri = new LtctSearchCommand(page, perPageNum, searchType, keyword);
		LtctVO ltct = (LtctVO) session.getAttribute("loginInst");
		cri.setLtctNo(ltct.getAreaNo());
		try {
			Map<String, Object> dataMap = ltctService.getPbhtListPage(cri);
			entity = new ResponseEntity<Map<String, Object>>(dataMap, HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String, Object>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return entity;
	}
	
	@RequestMapping("/bookmark-list")
	public ResponseEntity<Map<String, Object>> bookmarkList(@RequestParam(defaultValue="1")int page,
															@RequestParam(defaultValue="15")int perPageNum,
															HttpSession session) throws Exception{
		ResponseEntity<Map<String, Object>> entity = null;
		LtctSearchCommand cri = new LtctSearchCommand(page, perPageNum);
		LtctVO ltct = (LtctVO) session.getAttribute("loginInst");
		cri.setLtctNo(ltct.getLtctNo());
		try {
			Map<String, Object> dataMap = ltctService.getBookmarkListPage(cri);
			entity = new ResponseEntity<Map<String, Object>>(dataMap, HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String,Object>>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return entity;
	}
	
}
